# coding=utf-8
"""ESP connect interface
Модуль содержащий в себе методы интерфейса для общения с МУГом.

- C{Название} : описание ;
- C{Название} : описание .

В данном модуле описаны следующие переменные:
- C{packet_buf} : словарь содержащий буфер общения с каждым МУГом.
В данном модуле описаны следующие методы:
- C{} : .
В данном модуле описаны следующие классы:
- C{PacketBuf} : буфер общения с МУГом.
"""
# В файле есть (-) -----
import ESP_connect_classes as PCl
# import ESP_connect_bytelist as PByte


#
packet_buf = dict()  # dict {GCM_id: PacketBuf} - для простоты поиска


# буффер пакетов
class PacketBuf(object):
    def __init__(self, GCM_id):
        """ Конструктор буфера пакетов

        @param GCM_id : С{str} строка ID из 16 байт.
        """
        self.ID = 'XXXXXXXXXXXXXXXX'
        self.send_buffer = dict()  # dict {индекс: Packet}
        self.receive_buffer = dict()  # dict {индекс: Packet}
        self.sent_packet = {'ID': None, 'Packet': None}  # {"ID": индекс, "Packet": bytearray(Packet)}
        if PCl.check_id(GCM_id):
            self.ID = GCM_id

    def get_id(self):
        return self.ID


# функции оперирования с буфферами (-) -----
# - socket = Инициализация порта для приёма/отправки                         // запуск работы
# - (индекс пакета, ошибка) = Добавление пакета в буфер отправки (ID, пакет) // отправка пакета
# - ? = Прослушивание порта ()                                               // запуск приёма пакета
# - пакет = Получение пакета по ID (ID)                                      // приём пакета
# - {ID: amt} = Получение размеров буферов по ID ()                          // проверка приёма пакета
# - bool = Подтверждение получения пакета (ID, индекс пакета)                // проверка отправки пакета


def U_init_connect():
    """ Инициализация порта для приёма/отправки

    @return : socket
    """
    pass


def U_send_packet(packet):
    """ Добавление пакета в буфер отправки
    Отправка данных происходит не сразу при добавлении.
    Только после того, как МУГ установит кондакт с вопросом о наличии пакетов.
    Также после отправки пакета он попадёт в специальный резерв, где будет
    находится до тех пор, пока МУГ не подтвердит приём по индексу. Если
    подтверждения не будет, то он будет отправляться вновь и вновь.

    @param packet : С{Packet} - заполненный пакет.
    @return : (индекс пакета, ошибка)
        индекс пакета - индекс присвоеный пакету перед заносом в буфер;
        ошибка - если при занесении в буфер возникла ошибка, то значение не 0.
    """
    pass


# - ? = запуск приёма пакета ()
def U_start_receive(gcm_socket):
    """ Прослушивание порта
    .

    @param gcm_socket : С{socket} - .
    @return : .
    """
    pass


# - пакет = приём пакета (ID)
def U_receive_packet(gcm_id: str = None, all_packet: bool = False):
    """ Получение пакета по ID
    Возвращает (удаляя) пакет(ы) из очереди приёма.

    @param gcm_id : С{None} - получение пакетов из первой не пустой очереди.
                    С{str} - получение пакета по определённому ID.
    @param all_packet : С{bool} - выбор получения всех пакетов или только первого принятого.
    @return : принятый пакет С{Packet} (при all_packet=False), массив пакетов [С{Packet},...]
              (при all_packet=True, gcm_id=str_id) или список массивов пакетов
              {id: [С{Packet},...],...} (при all_packet=True, gcm_id=None) из очереди.
    """
    pass


# - {ID: amt} = проверка приёма пакета ()
def U_5(gcm_id: str = None):
    """ Получение размеров буферов по ID
    .

    @param gcm_id : С{None} - получение пакетов всех непустых МУГов.
                    С{str} - получение пакета по определённому ID.
    @return : список принятых пакетов формата {'id': len()}, если в параметре gcm_id передан
              нужный id, то возвращает число для этого МУГа (если его нет во внутреннем списке,
              то возвращает -1, т.е. общение не происходило ни в одну из сторон).
    """
    pass


# - bool = проверка отправки пакета (ID, индекс пакета)
def U_6(gcm_id: str, index: int):
    """ Подтверждение получения пакета
    .

    @param gcm_id : С{str} - ID устройства у каторого проверяется передача.
    @param index : С{int} - индекс отправленного пакета.
    @return : С{bool} - False, если пакет в буфере, True - если пакета нет в буфере (отправлен или не появлялся).
    """
    pass


#

#

#

#

#

test_byte_data = {'num': 0x00,
                  'time': '19-07-2021 15:19:51',
                  'group_id': '0102030405060708',
                  'attached_id': [{'01020304050607AA': 'component1', '01020304050607BB': 'component2'}],
                  'name': 'Container name'}
print('{')
for k, v in test_byte_data.items():
    print('  "' + k + '":', v)
print('}')

result = PCl.Packet.object_creator(test_byte_data)
print(type(result))
res = result.__dict__
print('{')
for k, v in res.items():
    print('  "' + k + '":', v)
print('}')

result.convert_to_ByteList(4)
